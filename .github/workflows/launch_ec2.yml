name: Deploy EC2, Install Docker & Nginx, Configure Reverse Proxy

on:
  push:
    branches:
      - main  # Trigger workflow on push to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up AWS Credentials (GitHub Secrets for AWS keys)
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Choose your AWS region

      # 3. Install Terraform (using the HashiCorp Terraform setup action)
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0  # Choose the Terraform version you need (adjust as necessary)

      # 4. Apply Terraform to provision EC2 instance (and other resources)
      - name: Apply Terraform Configuration
        run: |
          echo "Initializing Terraform..."
          terraform init
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve
          echo "Terraform applied successfully."

        # 5. Display Terraform Outputs
      - name: Display Terraform Outputs
        run: |
          echo "Terraform outputs:"
          terraform output -json

      # 6. Capture EC2 Public IP from JSON output
      - name: Capture EC2 Public IP
        run: |
          echo "Retrieving EC2 Public IP..."
          
          # Capture the public IP from the terraform output -json
          PUBLIC_IP=$(terraform output -json | jq -r '.ec2_public_ip.value')
          
          echo "EC2 Public IP: $PUBLIC_IP"
          
          # Check if the public IP is empty
          if [ -z "$PUBLIC_IP" ]; then
            echo "Error: EC2 Public IP is empty"
            exit 1
            fi

          # Use the new GitHub environment file method to pass the value
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV   # Set EC2 IP as environment variable
      # 6. Set up SSH key from GitHub Secrets
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/mykey.pem
          chmod 600 ~/.ssh/mykey.pem

      # 7. SSH into EC2, Install Docker, Pull Image, Run Container & Setup Nginx
      - name: SSH into EC2 and Set Up Docker, Pull Image & Configure Nginx
        run: |
          echo "SSH into EC2 instance at ${{ env.PUBLIC_IP }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/mykey.pem ubuntu@${{ env.PUBLIC_IP }} << 'EOF'
            echo "Updating package lists..."
            sudo apt update -y

            echo "Installing Docker..."
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker

            echo "Pulling Docker image from Docker Hub..."
            sudo docker pull markhill97/simple-user-management-fastapi-app:latest  # Replace with your Docker image name

            echo "Running the Docker container..."
            sudo docker run -d -p 8080:80 markhill97/simple-user-management-fastapi-app:latest  # Replace with your app's port

            echo "Installing Nginx..."
            sudo apt install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx

            echo "Configuring Nginx to reverse proxy to Docker container..."
            echo "
            server {
              listen 80;
              server_name _;

              location / {
                proxy_pass http://localhost:8080;  # Assuming Docker container runs on port 8080
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            " | sudo tee /etc/nginx/sites-available/default

            echo "Restarting Nginx..."
            sudo systemctl restart nginx

            echo "Deployment completed successfully."
          EOF

      # 8. Health Check: Verify that the application is running via the reverse proxy
      - name: Health Check - Verify Application is Running
        run: |
          echo "Performing health check on application at http://${{ env.PUBLIC_IP }}/"
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PUBLIC_IP }}/
        continue-on-error: true  # We want to check the health but don't fail the whole workflow if it fails

      # 9. Conditional Destroy (Only if health check passed)
      - name: Conditional Destroy Terraform Resources (Optional)
        if: ${{ success() }}  # Only destroy if all steps before it are successful
        run: |
          echo "Destroying Terraform resources..."
          terraform destroy -auto-approve
          echo "Terraform resources destroyed."
