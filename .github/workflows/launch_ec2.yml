name: Deploy EC2, Install Docker & Nginx, Configure Reverse Proxy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0

      - name: Apply Terraform Configuration
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Display Terraform Outputs
        run: |
          terraform output -json

          - name: Retrieve EC2 Public IP
          run: |
            echo "Retrieving EC2 Public IP..."
        
            # Capture raw Terraform output
            terraform_output=$(terraform output -json ec2_public_ip)
            echo "Raw Terraform output: $terraform_output"
        
            # Extract the public IP without quotes
            EC2_PUBLIC_IP=$(echo "$terraform_output" | tr -d '"')
            echo "Extracted EC2 Public IP: $EC2_PUBLIC_IP"
        
            # Validate the extracted IP
            if [ -z "$EC2_PUBLIC_IP" ]; then
              echo "Error: EC2 Public IP is empty."
              exit 1
            fi
        
            # Safely write to $GITHUB_ENV
            {
              echo "PUBLIC_IP=$EC2_PUBLIC_IP"
            } >> $GITHUB_ENV
            cat $GITHUB_ENV
        
            echo "Successfully set PUBLIC_IP as an environment variable."
        
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/mykey.pem
          chmod 600 ~/.ssh/mykey.pem

      - name: SSH into EC2 and Set Up
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/mykey.pem ubuntu@${{ env.PUBLIC_IP }} << 'EOF'
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo docker pull markhill97/simple-user-management-fastapi-app:latest
            sudo docker run -d -p 8080:80 markhill97/simple-user-management-fastapi-app:latest
            sudo apt install -y nginx
            echo "
            server {
              listen 80;
              server_name _;
              location / {
                proxy_pass http://localhost:8080;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            " | sudo tee /etc/nginx/sites-available/default
            sudo systemctl restart nginx
          EOF

      - name: Health Check - Verify Application
        run: |
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PUBLIC_IP }}/

      - name: Conditional Destroy Terraform Resources
        if: ${{ success() }}
        run: |
          terraform destroy -auto-approve
